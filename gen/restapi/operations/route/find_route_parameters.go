// Code generated by go-swagger; DO NOT EDIT.

package route

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewFindRouteParams creates a new FindRouteParams object
//
// There are no default values defined in the spec.
func NewFindRouteParams() FindRouteParams {

	return FindRouteParams{}
}

// FindRouteParams contains all the bound params for the find route operation
// typically these are obtained from a http.Request
//
// swagger:parameters FindRoute
type FindRouteParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  Min Items: 2
	  Unique: true
	  In: query
	*/
	HomeIds []uint64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewFindRouteParams() beforehand.
func (o *FindRouteParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qHomeIds, qhkHomeIds, _ := qs.GetOK("home_ids")
	if err := o.bindHomeIds(qHomeIds, qhkHomeIds, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindHomeIds binds and validates array parameter HomeIds from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *FindRouteParams) bindHomeIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("home_ids", "query", rawData)
	}
	var qvHomeIds string
	if len(rawData) > 0 {
		qvHomeIds = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	homeIdsIC := swag.SplitByFormat(qvHomeIds, "")
	if len(homeIdsIC) == 0 {
		return errors.Required("home_ids", "query", homeIdsIC)
	}

	var homeIdsIR []uint64
	for i, homeIdsIV := range homeIdsIC {
		// items.Format: "uint64"
		homeIdsI, err := swag.ConvertUint64(homeIdsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "home_ids", i), "query", "uint64", homeIdsI)
		}

		homeIdsIR = append(homeIdsIR, homeIdsI)
	}

	o.HomeIds = homeIdsIR
	if err := o.validateHomeIds(formats); err != nil {
		return err
	}

	return nil
}

// validateHomeIds carries on validations for parameter HomeIds
func (o *FindRouteParams) validateHomeIds(formats strfmt.Registry) error {

	homeIdsSize := int64(len(o.HomeIds))

	// minItems: 2
	if err := validate.MinItems("home_ids", "query", homeIdsSize, 2); err != nil {
		return err
	}

	// uniqueItems: true
	if err := validate.UniqueItems("home_ids", "query", o.HomeIds); err != nil {
		return err
	}
	return nil
}
