// Code generated by go-swagger; DO NOT EDIT.

package route

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindRouteHandlerFunc turns a function with the right signature into a find route handler
type FindRouteHandlerFunc func(FindRouteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindRouteHandlerFunc) Handle(params FindRouteParams) middleware.Responder {
	return fn(params)
}

// FindRouteHandler interface for that can handle valid find route params
type FindRouteHandler interface {
	Handle(FindRouteParams) middleware.Responder
}

// NewFindRoute creates a new http.Handler for the find route operation
func NewFindRoute(ctx *middleware.Context, handler FindRouteHandler) *FindRoute {
	return &FindRoute{Context: ctx, Handler: handler}
}

/*
	FindRoute swagger:route GET /v1/route route findRoute

# Find Route

Find route between 2 homes or more
*/
type FindRoute struct {
	Context *middleware.Context
	Handler FindRouteHandler
}

func (o *FindRoute) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindRouteParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
