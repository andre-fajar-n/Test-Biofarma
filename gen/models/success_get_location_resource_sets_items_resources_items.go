// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SuccessGetLocationResourceSetsItemsResourcesItems success get location resource sets items resources items
//
// swagger:model successGetLocationResourceSetsItemsResourcesItems
type SuccessGetLocationResourceSetsItemsResourcesItems struct {

	// address
	Address *SuccessGetLocationResourceSetsItemsResourcesItemsAddress `json:"address,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// point
	Point *SuccessGetLocationResourceSetsItemsResourcesItemsPoint `json:"point,omitempty"`
}

// Validate validates this success get location resource sets items resources items
func (m *SuccessGetLocationResourceSetsItemsResourcesItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SuccessGetLocationResourceSetsItemsResourcesItems) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *SuccessGetLocationResourceSetsItemsResourcesItems) validatePoint(formats strfmt.Registry) error {
	if swag.IsZero(m.Point) { // not required
		return nil
	}

	if m.Point != nil {
		if err := m.Point.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("point")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this success get location resource sets items resources items based on the context it is used
func (m *SuccessGetLocationResourceSetsItemsResourcesItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SuccessGetLocationResourceSetsItemsResourcesItems) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {
		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *SuccessGetLocationResourceSetsItemsResourcesItems) contextValidatePoint(ctx context.Context, formats strfmt.Registry) error {

	if m.Point != nil {
		if err := m.Point.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("point")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SuccessGetLocationResourceSetsItemsResourcesItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SuccessGetLocationResourceSetsItemsResourcesItems) UnmarshalBinary(b []byte) error {
	var res SuccessGetLocationResourceSetsItemsResourcesItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
