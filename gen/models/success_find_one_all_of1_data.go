// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SuccessFindOneAllOf1Data success find one all of1 data
//
// swagger:model successFindOneAllOf1Data
type SuccessFindOneAllOf1Data struct {
	ModelIdentifier

	HomeData

	ModelTrackTime
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SuccessFindOneAllOf1Data) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ModelIdentifier
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ModelIdentifier = aO0

	// AO1
	var aO1 HomeData
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.HomeData = aO1

	// AO2
	var aO2 ModelTrackTime
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.ModelTrackTime = aO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SuccessFindOneAllOf1Data) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.ModelIdentifier)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.HomeData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.ModelTrackTime)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this success find one all of1 data
func (m *SuccessFindOneAllOf1Data) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ModelIdentifier
	if err := m.ModelIdentifier.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with HomeData
	if err := m.HomeData.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ModelTrackTime
	if err := m.ModelTrackTime.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this success find one all of1 data based on the context it is used
func (m *SuccessFindOneAllOf1Data) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ModelIdentifier
	if err := m.ModelIdentifier.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with HomeData
	if err := m.HomeData.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ModelTrackTime
	if err := m.ModelTrackTime.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SuccessFindOneAllOf1Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SuccessFindOneAllOf1Data) UnmarshalBinary(b []byte) error {
	var res SuccessFindOneAllOf1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
